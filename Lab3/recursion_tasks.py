"""
–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ä–µ–∫—É—Ä—Å–∏–∏
"""
import os

def binary_search_recursive(arr, target, low=0, high=None):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ.

    Args:
        arr (list): –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
        target: –ò—Å–∫–æ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç
        low (int): –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞
        high (int): –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞

    Returns:
        int: –ò–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–ª–∏ -1 –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    if high is None:
        high = len(arr) - 1

    # –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π - —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    if low > high:
        return -1

    # –ù–∞—Ö–æ–¥–∏–º —Å–µ—Ä–µ–¥–∏–Ω—É
    mid = (low + high) // 2

    # –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π - —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω
    if arr[mid] == target:
        return mid

    # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ —à–∞–≥–∏
    elif arr[mid] > target:
        return binary_search_recursive(arr, target, low, mid - 1)
    else:
        return binary_search_recursive(arr, target, mid + 1, high)


def file_system_walk(start_path, indent=0, max_depth=None, current_depth=0):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã.

    Args:
        start_path (str): –ù–∞—á–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –æ–±—Ö–æ–¥–∞
        indent (int): –£—Ä–æ–≤–µ–Ω—å –æ—Ç—Å—Ç—É–ø–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏
        max_depth (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏
        current_depth (int): –¢–µ–∫—É—â–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏
    """
    if max_depth is not None and current_depth > max_depth:
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        items = os.listdir(start_path)

        for item in items:
            item_path = os.path.join(start_path, item)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞
            if os.path.isdir(item_path):
                print("  " * indent + f"üìÅ {item}/")
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                file_system_walk(item_path, indent + 1, max_depth, current_depth + 1)
            else:
                print("  " * indent + f"üìÑ {item}")

    except PermissionError:
        print("  " * indent + "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    except FileNotFoundError:
        print("  " * indent + "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")


def hanoi_towers(n, source, target, auxiliary):
    """
    –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –•–∞–Ω–æ–π—Å–∫–∏—Ö –±–∞—à–µ–Ω.

    Args:
        n (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏—Å–∫–æ–≤
        source (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Å—Ç–µ—Ä–∂–µ–Ω—å
        target (str): –¶–µ–ª–µ–≤–æ–π —Å—Ç–µ—Ä–∂–µ–Ω—å
        auxiliary (str): –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ç–µ—Ä–∂–µ–Ω—å
    """
    step_counter = [0]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è mutable –æ–±—ä–µ–∫—Ç–∞

    def _hanoi_towers_internal(n, source, target, auxiliary):
        if n == 1:
            # –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π: –ø–µ—Ä–µ–º–µ—â–∞–µ–º –æ–¥–∏–Ω –¥–∏—Å–∫
            step_counter[0] += 1
            print(f"{step_counter[0]}. –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –¥–∏—Å–∫ 1 —Å {source} –Ω–∞ {target}")
            return

        # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ —à–∞–≥–∏:
        # 1. –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å n-1 –¥–∏—Å–∫–æ–≤ –Ω–∞ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ç–µ—Ä–∂–µ–Ω—å
        _hanoi_towers_internal(n - 1, source, auxiliary, target)

        # 2. –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –¥–∏—Å–∫ –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —Å—Ç–µ—Ä–∂–µ–Ω—å
        step_counter[0] += 1
        print(f"{step_counter[0]}. –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –¥–∏—Å–∫ {n} —Å {source} –Ω–∞ {target}")

        # 3. –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å n-1 –¥–∏—Å–∫–æ–≤ —Å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —Å—Ç–µ—Ä–∂–µ–Ω—å
        _hanoi_towers_internal(n - 1, auxiliary, target, source)

    _hanoi_towers_internal(n, source, target, auxiliary)
    return step_counter[0]


def measure_recursion_depth():
    """
    –ò–∑–º–µ—Ä–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≥–ª—É–±–∏–Ω—ã —Ä–µ–∫—É—Ä—Å–∏–∏ –ø—Ä–∏ –æ–±—Ö–æ–¥–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã.
    """
    max_depth_found = [0]

    def count_depth(path, current_depth):
        max_depth_found[0] = max(max_depth_found[0], current_depth)

        try:
            for item in os.listdir(path):
                item_path = os.path.join(path, item)
                if os.path.isdir(item_path):
                    count_depth(item_path, current_depth + 1)
        except (PermissionError, OSError):
            pass

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    count_depth(".", 0)
    return max_depth_found[0]


# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
if __name__ == "__main__":
    print("=== –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ ===")
    arr = [1, 3, 5, 7, 9, 11, 13, 15]
    target = 7
    index = binary_search_recursive(arr, target)
    print(f"–ú–∞—Å—Å–∏–≤: {arr}")
    print(f"–≠–ª–µ–º–µ–Ω—Ç {target} –Ω–∞–π–¥–µ–Ω –ø–æ –∏–Ω–¥–µ–∫—Å—É: {index}")

    print("\n=== –•–∞–Ω–æ–π—Å–∫–∏–µ –±–∞—à–Ω–∏ (3 –¥–∏—Å–∫–∞) ===")
    total_steps = hanoi_towers(3, 'A', 'C', 'B')
    print(f"–í—Å–µ–≥–æ —à–∞–≥–æ–≤: {total_steps}")

    print("\n=== –û–±—Ö–æ–¥ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –≥–ª—É–±–∏–Ω–∞) ===")
    # –û–±—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≥–ª—É–±–∏–Ω—ã
    file_system_walk(".", max_depth=2)

    print(f"\n=== –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã —Ä–µ–∫—É—Ä—Å–∏–∏ ===")
    depth = measure_recursion_depth()
    print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ –ø—Ä–∏ –æ–±—Ö–æ–¥–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã: {depth}")